/*
 * generated by Xtext 2.16.0
 */
package org.xtext.behaviortree.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.behaviortree.ide.contentassist.antlr.internal.InternalBehaviorTreeParser;
import org.xtext.behaviortree.services.BehaviorTreeGrammarAccess;

public class BehaviorTreeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BehaviorTreeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BehaviorTreeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTreeNodeAccess().getAlternatives(), "rule__TreeNode__Alternatives");
			builder.put(grammarAccess.getSubtreeNodeAccess().getAlternatives(), "rule__SubtreeNode__Alternatives");
			builder.put(grammarAccess.getControlNodeAccess().getAlternatives(), "rule__ControlNode__Alternatives");
			builder.put(grammarAccess.getDecoratorNodeAccess().getAlternatives(), "rule__DecoratorNode__Alternatives");
			builder.put(grammarAccess.getLeafNodeAccess().getAlternatives(), "rule__LeafNode__Alternatives");
			builder.put(grammarAccess.getAbstractActionAccess().getAlternatives(), "rule__AbstractAction__Alternatives");
			builder.put(grammarAccess.getBTModelAccess().getGroup(), "rule__BTModel__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getBehaviorTreeAccess().getGroup(), "rule__BehaviorTree__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getSubtreeAccess().getGroup(), "rule__Subtree__Group__0");
			builder.put(grammarAccess.getSubtreeWrapperAccess().getGroup(), "rule__SubtreeWrapper__Group__0");
			builder.put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
			builder.put(grammarAccess.getSequenceStarAccess().getGroup(), "rule__SequenceStar__Group__0");
			builder.put(grammarAccess.getFallbackAccess().getGroup(), "rule__Fallback__Group__0");
			builder.put(grammarAccess.getFallbackStarAccess().getGroup(), "rule__FallbackStar__Group__0");
			builder.put(grammarAccess.getParallelAccess().getGroup(), "rule__Parallel__Group__0");
			builder.put(grammarAccess.getForceSuccessAccess().getGroup(), "rule__ForceSuccess__Group__0");
			builder.put(grammarAccess.getForceFailureAccess().getGroup(), "rule__ForceFailure__Group__0");
			builder.put(grammarAccess.getRepeatAccess().getGroup(), "rule__Repeat__Group__0");
			builder.put(grammarAccess.getInverterAccess().getGroup(), "rule__Inverter__Group__0");
			builder.put(grammarAccess.getTimeoutAccess().getGroup(), "rule__Timeout__Group__0");
			builder.put(grammarAccess.getRetryUntilSuccessAccess().getGroup(), "rule__RetryUntilSuccess__Group__0");
			builder.put(grammarAccess.getBlackboardCheckDoubleAccess().getGroup(), "rule__BlackboardCheckDouble__Group__0");
			builder.put(grammarAccess.getBlackboardCheckIntAccess().getGroup(), "rule__BlackboardCheckInt__Group__0");
			builder.put(grammarAccess.getBlackboardCheckStringAccess().getGroup(), "rule__BlackboardCheckString__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getAlwaysSuccessAccess().getGroup(), "rule__AlwaysSuccess__Group__0");
			builder.put(grammarAccess.getAlwaysFailureAccess().getGroup(), "rule__AlwaysFailure__Group__0");
			builder.put(grammarAccess.getSetBlackboardAccess().getGroup(), "rule__SetBlackboard__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getSwitchAccess().getGroup(), "rule__Switch__Group__0");
			builder.put(grammarAccess.getBTModelAccess().getMain_tree_to_executeAssignment_4(), "rule__BTModel__Main_tree_to_executeAssignment_4");
			builder.put(grammarAccess.getBTModelAccess().getImportsAssignment_6(), "rule__BTModel__ImportsAssignment_6");
			builder.put(grammarAccess.getBTModelAccess().getTreesAssignment_7(), "rule__BTModel__TreesAssignment_7");
			builder.put(grammarAccess.getImportAccess().getImportURIAssignment_4(), "rule__Import__ImportURIAssignment_4");
			builder.put(grammarAccess.getBehaviorTreeAccess().getAttributesAssignment_2(), "rule__BehaviorTree__AttributesAssignment_2");
			builder.put(grammarAccess.getBehaviorTreeAccess().getNodesAssignment_4(), "rule__BehaviorTree__NodesAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getValueAssignment_2(), "rule__Attribute__ValueAssignment_2");
			builder.put(grammarAccess.getSubtreeAccess().getBehaviortreeAssignment_4(), "rule__Subtree__BehaviortreeAssignment_4");
			builder.put(grammarAccess.getSubtreeAccess().getAttributesAssignment_5(), "rule__Subtree__AttributesAssignment_5");
			builder.put(grammarAccess.getSubtreeWrapperAccess().getBehaviortreeAssignment_4(), "rule__SubtreeWrapper__BehaviortreeAssignment_4");
			builder.put(grammarAccess.getSubtreeWrapperAccess().getAttributesAssignment_5(), "rule__SubtreeWrapper__AttributesAssignment_5");
			builder.put(grammarAccess.getSequenceAccess().getAttributesAssignment_3(), "rule__Sequence__AttributesAssignment_3");
			builder.put(grammarAccess.getSequenceAccess().getNodesAssignment_5(), "rule__Sequence__NodesAssignment_5");
			builder.put(grammarAccess.getSequenceStarAccess().getAttributesAssignment_3(), "rule__SequenceStar__AttributesAssignment_3");
			builder.put(grammarAccess.getSequenceStarAccess().getNodesAssignment_5(), "rule__SequenceStar__NodesAssignment_5");
			builder.put(grammarAccess.getFallbackAccess().getAttributesAssignment_3(), "rule__Fallback__AttributesAssignment_3");
			builder.put(grammarAccess.getFallbackAccess().getNodesAssignment_5(), "rule__Fallback__NodesAssignment_5");
			builder.put(grammarAccess.getFallbackStarAccess().getAttributesAssignment_3(), "rule__FallbackStar__AttributesAssignment_3");
			builder.put(grammarAccess.getFallbackStarAccess().getNodesAssignment_5(), "rule__FallbackStar__NodesAssignment_5");
			builder.put(grammarAccess.getParallelAccess().getAttributesAssignment_3(), "rule__Parallel__AttributesAssignment_3");
			builder.put(grammarAccess.getParallelAccess().getNodesAssignment_5(), "rule__Parallel__NodesAssignment_5");
			builder.put(grammarAccess.getForceSuccessAccess().getAttributesAssignment_3(), "rule__ForceSuccess__AttributesAssignment_3");
			builder.put(grammarAccess.getForceSuccessAccess().getNodeAssignment_5(), "rule__ForceSuccess__NodeAssignment_5");
			builder.put(grammarAccess.getForceFailureAccess().getAttributesAssignment_3(), "rule__ForceFailure__AttributesAssignment_3");
			builder.put(grammarAccess.getForceFailureAccess().getNodeAssignment_5(), "rule__ForceFailure__NodeAssignment_5");
			builder.put(grammarAccess.getRepeatAccess().getAttributesAssignment_3(), "rule__Repeat__AttributesAssignment_3");
			builder.put(grammarAccess.getRepeatAccess().getNodeAssignment_5(), "rule__Repeat__NodeAssignment_5");
			builder.put(grammarAccess.getInverterAccess().getAttributesAssignment_3(), "rule__Inverter__AttributesAssignment_3");
			builder.put(grammarAccess.getInverterAccess().getNodeAssignment_5(), "rule__Inverter__NodeAssignment_5");
			builder.put(grammarAccess.getTimeoutAccess().getAttributesAssignment_3(), "rule__Timeout__AttributesAssignment_3");
			builder.put(grammarAccess.getTimeoutAccess().getNodeAssignment_5(), "rule__Timeout__NodeAssignment_5");
			builder.put(grammarAccess.getRetryUntilSuccessAccess().getAttributesAssignment_3(), "rule__RetryUntilSuccess__AttributesAssignment_3");
			builder.put(grammarAccess.getRetryUntilSuccessAccess().getNodeAssignment_5(), "rule__RetryUntilSuccess__NodeAssignment_5");
			builder.put(grammarAccess.getBlackboardCheckDoubleAccess().getAttributesAssignment_3(), "rule__BlackboardCheckDouble__AttributesAssignment_3");
			builder.put(grammarAccess.getBlackboardCheckDoubleAccess().getNodeAssignment_5(), "rule__BlackboardCheckDouble__NodeAssignment_5");
			builder.put(grammarAccess.getBlackboardCheckIntAccess().getAttributesAssignment_3(), "rule__BlackboardCheckInt__AttributesAssignment_3");
			builder.put(grammarAccess.getBlackboardCheckIntAccess().getNodeAssignment_5(), "rule__BlackboardCheckInt__NodeAssignment_5");
			builder.put(grammarAccess.getBlackboardCheckStringAccess().getAttributesAssignment_3(), "rule__BlackboardCheckString__AttributesAssignment_3");
			builder.put(grammarAccess.getBlackboardCheckStringAccess().getNodeAssignment_5(), "rule__BlackboardCheckString__NodeAssignment_5");
			builder.put(grammarAccess.getConditionAccess().getAttributesAssignment_3(), "rule__Condition__AttributesAssignment_3");
			builder.put(grammarAccess.getAlwaysSuccessAccess().getAttributesAssignment_3(), "rule__AlwaysSuccess__AttributesAssignment_3");
			builder.put(grammarAccess.getAlwaysFailureAccess().getAttributesAssignment_3(), "rule__AlwaysFailure__AttributesAssignment_3");
			builder.put(grammarAccess.getSetBlackboardAccess().getAttributesAssignment_3(), "rule__SetBlackboard__AttributesAssignment_3");
			builder.put(grammarAccess.getActionAccess().getAttributesAssignment_3(), "rule__Action__AttributesAssignment_3");
			builder.put(grammarAccess.getSwitchAccess().getAttributesAssignment_3(), "rule__Switch__AttributesAssignment_3");
			builder.put(grammarAccess.getSwitchAccess().getNodesAssignment_5(), "rule__Switch__NodesAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BehaviorTreeGrammarAccess grammarAccess;

	@Override
	protected InternalBehaviorTreeParser createParser() {
		InternalBehaviorTreeParser result = new InternalBehaviorTreeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BehaviorTreeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BehaviorTreeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
