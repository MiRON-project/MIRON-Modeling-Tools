grammar org.xtext.miron.MIRoN with org.xtext.roqme.RoQME

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/behaviortree.metamodel/metamodel/behaviortree.ecore" as behaviortree
import "platform:/resource/miron.metamodel/metamodel/datatypes/mirondatatypes.ecore" as mirondatatypes
import "platform:/resource/miron.metamodel/metamodel/kernel/mironkernel.ecore" as mironkernel
import "platform:/resource/roqme.metamodel/metamodel/datatypes/roqmedatatypes.ecore" as roqmedatatypes
import "platform:/resource/roqme.metamodel/metamodel/expressions/roqmeexpressions.ecore" as roqmeexpressions
import "platform:/resource/roqme.metamodel/metamodel/kernel/roqmekernel.ecore" as roqmekernel


MironModel returns mirondatatypes::MironModel:
	(description=ElementDescription? 'miron' namespace=EString)?
	(sentences+=Import)*
	(dataTypes  += DataTypeDefinition
	| variables  += TypedVariable
	| sentences += Sentence)*;


/* *********************************
 * DATATYPE EPACKAGE
 * *********************************/
 
 @Override
 Import returns mironkernel::Import:
 	'import' importURI=EString ('as' alias=EString)?
 ;
 
 @Override
 EnumType returns roqmedatatypes::EnumType:
	'enum' ('['cardinality=INT']')? 
	'{' 
		literals += EnumLiteralAux (',' literals += EnumLiteralAux )*
	'}';

 EnumLiteralAux returns roqmedatatypes::EnumLiteral: 
	EnumLiteral | BehaviorTreeLiteral
 ;
 
 BehaviorTreeLiteral returns roqmedatatypes::EnumLiteral:
	{mirondatatypes::BehaviorTreeLiteral}
	name=ID ":" reference = [behaviortree::BehaviorTree | EString]
 ;

/* *********************************
 * KERNEL EPACKAGE
 * *********************************/
 
 @Override
 TypedVariable returns roqmedatatypes::TypedVariable:
	Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable | VariationPoint;
 
 VariationPoint returns mironkernel::VariationPoint:
 	'varpoint' name=ID ':' declaration = DataTypeDeclaration
 	binding = Binding
 ;
 
 Binding returns mironkernel::Binding:
 	insertionType = InsertionTypeEnum
 	(('xpath' '(' xpath=EString ')') | 
 		(targets += [ecore::EObject | EString] 
 			 (',' targets += [ecore::EObject | EString])*
 		)
 	)
 ;
 
 enum InsertionTypeEnum returns mironkernel::InsertionTypeEnum:
 	IN = 'in' | AFTER = 'after' | BEFORE = 'before'
 ;
 
 @Override
 Sentence returns roqmedatatypes::Sentence:
	Observation | Rule;
	
 Rule returns mironkernel::Rule:
 	'rule' name=ID ':' trigger=ContextPattern 'implies'
 	(actions+=RuleAction | ('{' actions+=RuleAction (',' actions+=RuleAction)+ '}'))
 ;

 RuleAction returns mironkernel::RuleAction:
 	VariantAssignment
 ;
 
 VariantAssignment returns mironkernel::VariantAssignment:
 	variable = [mironkernel::VariationPoint | QualifiedName]
 	':=' value = TypedValue
 ;

 