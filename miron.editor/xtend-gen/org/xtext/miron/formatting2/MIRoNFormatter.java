/**
 * generated by Xtext 2.12.0
 */
package org.xtext.miron.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import miron.metamodel.datatypes.MironModel;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.miron.services.MIRoNGrammarAccess;
import org.xtext.roqme.formatting2.RoQMEFormatter;
import roqme.metamodel.datatypes.DataTypeDefinition;
import roqme.metamodel.datatypes.EnumLiteral;
import roqme.metamodel.datatypes.EnumType;
import roqme.metamodel.datatypes.RoqmeModel;
import roqme.metamodel.datatypes.Sentence;
import roqme.metamodel.datatypes.TypedVariable;
import roqme.metamodel.kernel.PrimitiveContext;

@SuppressWarnings("all")
public class MIRoNFormatter extends RoQMEFormatter {
  @Inject
  @Extension
  private MIRoNGrammarAccess _mIRoNGrammarAccess;
  
  protected void _format(final MironModel mironModel, @Extension final IFormattableDocument document) {
    EList<Sentence> _sentences = mironModel.getSentences();
    for (final Sentence sentence : _sentences) {
      document.<Sentence>format(sentence);
    }
    EList<DataTypeDefinition> _dataTypes = mironModel.getDataTypes();
    for (final DataTypeDefinition dataTypeDefinition : _dataTypes) {
      document.<DataTypeDefinition>format(dataTypeDefinition);
    }
    EList<TypedVariable> _variables = mironModel.getVariables();
    for (final TypedVariable typedVariable : _variables) {
      document.<TypedVariable>format(typedVariable);
    }
  }
  
  protected void _format(final EnumType enumType, @Extension final IFormattableDocument document) {
    EList<EnumLiteral> _literals = enumType.getLiterals();
    for (final EnumLiteral enumLiteral : _literals) {
      document.<EnumLiteral>format(enumLiteral);
    }
  }
  
  public void format(final Object mironModel, final IFormattableDocument document) {
    if (mironModel instanceof PrimitiveContext) {
      _format((PrimitiveContext)mironModel, document);
      return;
    } else if (mironModel instanceof MironModel) {
      _format((MironModel)mironModel, document);
      return;
    } else if (mironModel instanceof XtextResource) {
      _format((XtextResource)mironModel, document);
      return;
    } else if (mironModel instanceof EnumType) {
      _format((EnumType)mironModel, document);
      return;
    } else if (mironModel instanceof RoqmeModel) {
      _format((RoqmeModel)mironModel, document);
      return;
    } else if (mironModel instanceof EObject) {
      _format((EObject)mironModel, document);
      return;
    } else if (mironModel == null) {
      _format((Void)null, document);
      return;
    } else if (mironModel != null) {
      _format(mironModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(mironModel, document).toString());
    }
  }
}
